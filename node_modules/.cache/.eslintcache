[{"/Users/a260/dev/myProject/dashboard/src/index.js":"1","/Users/a260/dev/myProject/dashboard/src/App.js":"2","/Users/a260/dev/myProject/dashboard/src/reportWebVitals.js":"3","/Users/a260/dev/myProject/dashboard/src/home/Dashboard.js":"4","/Users/a260/dev/myProject/dashboard/src/components/ToDoPart.js":"5","/Users/a260/dev/myProject/dashboard/src/components/GreetingPart.js":"6","/Users/a260/dev/myProject/dashboard/src/components/ThirdPart.js":"7"},{"size":535,"mtime":1688460300259,"results":"8","hashOfConfig":"9"},{"size":189,"mtime":1688460300253,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1688460300259,"results":"11","hashOfConfig":"9"},{"size":433,"mtime":1688542723329,"results":"12","hashOfConfig":"9"},{"size":6819,"mtime":1688544800071,"results":"13","hashOfConfig":"9"},{"size":4067,"mtime":1688542630987,"results":"14","hashOfConfig":"9"},{"size":1254,"mtime":1688536710759,"results":"15","hashOfConfig":"9"},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"10tsc17",{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"32"},{"filePath":"33","messages":"34","suppressedMessages":"35","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","suppressedMessages":"39","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"40"},"/Users/a260/dev/myProject/dashboard/src/index.js",[],[],"/Users/a260/dev/myProject/dashboard/src/App.js",[],[],"/Users/a260/dev/myProject/dashboard/src/reportWebVitals.js",[],[],"/Users/a260/dev/myProject/dashboard/src/home/Dashboard.js",["41"],[],"import styled, { css } from \"styled-components\";\nimport GreetingPart from \"../components/GreetingPart\";\nimport ToDoPart from \"../components/ToDoPart\";\nimport ThirdPart from \"../components/ThirdPart\";\n\nconst Wrap = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n`;\n\nfunction Dashboard() {\n  return (\n    <Wrap>\n      <GreetingPart />\n      <ToDoPart />\n      <ThirdPart />\n    </Wrap>\n  );\n}\n\nexport default Dashboard;\n","/Users/a260/dev/myProject/dashboard/src/components/ToDoPart.js",["42","43","44","45"],[],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport { SlOptionsVertical } from \"react-icons/sl\";\n\nconst AlignCenter = css`\n  align-items: center;\n  display: flex;\n  justify-content: center;\n`;\n\nconst MainContent = styled.div`\n  box-sizing: border-box; \n  height: 100%;\n  /* padding: 30px; */\n  width: 33.3%;\n  border-right: 1px solid black;\n`;\n\nconst HorizontalAlign = css`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst ContentTitleArea = styled.div`\n  ${ AlignCenter }\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  font-size: 18px;\n  font-weight: 700;\n  height: 50px;\n`;\n\nconst ToDoInputArea = styled.div`\n  ${ HorizontalAlign }\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  height: 50px;\n`;\n\nconst InputArea = styled.input`\n  border-width: 0px;\n  font-size: 18px;\n  height: 100%;\n  width: 70%;\n  padding: 0px 10px;\n  margin: 0px;\n\n  ::placeholder {\n    font-size: 18px;\n  }\n`;\n\nconst InputButton = styled.div`\n  ${ AlignCenter }\n  border-left: 1px solid black;\n  /* border-radius: 10px; */\n  font-size: 18px;\n  height: 100%;\n  min-width: 60px;\n  width: 30%;\n\n  &:hover {\n    background-color: black;\n    color: white;\n  };\n`;\n\nconst ScrollArea = styled.div`\n  box-sizing: border-box;\n  height: 80%;\n  overflow-y: scroll;\n  width: 100%;\n\n  ::-webkit-scrollbar {\n    /* width: 5px; */\n  };\n  ::-webkit-scrollbar-thumb {\n    /* background-clip: padding-box; */\n    /* background-color: rgb(0,0,0,0.7); */\n    /* border: 1px solid transparent; */\n    /* border-radius: 3px; */\n  };\n  ::-webkit-scrollbar-track {\n    // background-color: rgb(0,0,0,0.1);\n    /* border-radius: 3px; */\n  };\n`;\n\nconst TodoListBox = styled.div`\n  /* ${ HorizontalAlign } */\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  padding: 10px 5px;\n  position: relative;\n\n  &:hover {\n    background-color: black;\n    color: white;\n  };\n`;\n\nconst CheckBoxStyle = styled.input`\n  height: 15px;\n`;\n\nconst ContentStyle = styled.div`\n  align-items: center;\n  box-sizing: border-box;\n  display: flex;\n  font-size: 18px;\n  padding: 0px 10px;\n  width: 90%;\n`;\n\nconst CheckedStyle = styled(ContentStyle)`\n  color: grey;\n  text-decoration: line-through;\n`;\n\nconst OptionButton = styled.div`\n  ${ AlignCenter }\n  cursor: pointer;\n  width: 30px;\n`;\n\nconst OptionArea = styled.div`\n  bottom: 0;\n  display: flex;\n  position: absolute;\n  right: 0;\n`;\n\nconst ButtonStyle = styled.div`\n  box-sizing: border-box;\n  cursor: pointer;\n  // padding: 5px 10px;\n`;\n\nfunction ToDoPart() {\n  const [data, setData] = useState('');\n  const [isChecked, setIsChecked] = useState(false);\n  const [editData, setEditData] = useState('');\n  const [toDoList, setToDoList] = useState([]);\n  const [currKey, setCurrKey] = useState(0);\n  const [checkedStates, setCheckedStates] = useState({});\n  const [optionStates, setOptionStates] = useState({});\n  const [editStates, setEditStates] = useState({});\n\n  useEffect(() => {\n    const test = JSON.parse((localStorage.getItem(currKey)));\n    console.log(test);\n  }, []);\n   \n  // 추가 시 인풋 데이터 담기\n  const handleAddToDo = (e) => {\n    e.preventDefault();\n    setData(e.target.value);\n  };\n\n  // 수정 시 인풋 데이터 담기\n  const handleEditToDo = (e) => {\n    e.preventDefault();\n    setEditData(e.target.value);\n  };\n\n  // 추가 버튼 클릭 이벤트\n  const addToDo = (e) => {\n    e.preventDefault();\n\n    if(data !== '') {\n      setToDoList([ ...toDoList,{ id: currKey, content: data }]);  \n      localStorage.setItem('toDoData', JSON.stringify({ id: currKey, content: data }));\n    } else {\n      alert('할 일을 입력해주세요 :^)');\n    }\n\n\n    setCurrKey(currKey + 1);\n    setData('');\n  };\n\n  // 체크박스 상태 확인\n  const handleChecked = (id) => {\n    setCheckedStates((preState) => ({\n      ...preState,\n      [id]: !preState[id],\n    }));\n  };\n\n  // 수정&삭제 옵션 열기\n  const toggleOption = (id) => {\n    setOptionStates((preState) => ({\n      ...preState,\n      [id]: !preState[id],\n    }));\n  };\n\n  // 수정폼 열기\n  const toggleEditForm = (id) => {\n    console.log('수정폼 열기 - ', id);\n    // setEditStates((preState) => ({\n    //   ...preState,\n    //   [id]: !preState[id],\n    // }));    \n  };\n\n  // 수정\n  const editToDo = (id) => {\n    // const preList = [...toDoList];\n    // const findIndex = toDoList.findIndex(toDo => toDo.id === id);\n    // preList[findIndex].content = editData;\n    // setToDoList(preList);\n  };\n\n  // 삭제 \n  const deleteTodo = (id) => {\n    if(window.confirm('삭제하시겠어요??')){\n      setToDoList(toDoList.filter((todo) => todo.id !== id));\n    };\n    setOptionStates(!optionStates);\n  };\n\n  const toDoListCon = toDoList.map((thisResult) => {\n    const dataId = thisResult.id;\n      return(\n        editStates[dataId] ?\n          // >>>>>>>>>> 수정 상태 일 때 <<<<<<<<<<\n          <HorizontalAlign>\n            <InputArea \n              onChange={ handleEditToDo } \n              placeholder=\"수정값\" \n              value={ editData } \n            />\n            <InputButton onClick={ editToDo(dataId) }>수정</InputButton>\n          </HorizontalAlign> : \n\n          // >>>>>>>>>> 수정 상태가 아닐 때 <<<<<<<<<<\n          <TodoListBox \n            key={ dataId }\n          >\n            <CheckBoxStyle \n              key={ dataId }\n              onChange={ () => handleChecked(dataId) }\n              type=\"checkbox\"\n            />\n            {\n              checkedStates[dataId] ?\n                <CheckedStyle>{ thisResult.content }</CheckedStyle> :\n                <ContentStyle>{ thisResult.content }</ContentStyle>\n            }\n            <OptionButton onClick={ () => toggleOption(dataId) }>\n              <SlOptionsVertical size=\"12\" />\n            </OptionButton>\n            {\n              optionStates[dataId] &&\n                <OptionArea>\n                  <ButtonStyle onClick={ () => toggleEditForm(dataId) }>수정</ButtonStyle>\n                  <ButtonStyle onClick={ () => deleteTodo(dataId) }>삭제</ButtonStyle>\n                </OptionArea> \n            }\n          </TodoListBox\n            >\n      )\n  });\n\n  return (\n    <MainContent>\n      {/* ---------- 타이틀 영역 ---------- */}\n      <ContentTitleArea>오늘 할 일은 {toDoList.length}개에요</ContentTitleArea>\n\n      {/* ---------- 추가 영역 ---------- */}\n      <ToDoInputArea>\n        <InputArea \n          onChange={ handleAddToDo } \n          placeholder=\"할 일\" \n          value={ data } \n        />\n        <InputButton onClick={ addToDo }>저장</InputButton>\n      </ToDoInputArea>\n\n      {/* ---------- 컨텐츠 영역 ---------- */}\n      <ScrollArea>\n        { toDoListCon }\n      </ScrollArea>\n    </MainContent> \n  );\n};\n\nexport default ToDoPart;","/Users/a260/dev/myProject/dashboard/src/components/GreetingPart.js",["46"],[],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst AlignCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst HorizontalAlign = css`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst MainContent = styled.div`\n  box-sizing: border-box; \n  height: 100%;\n  /* padding: 30px; */\n  width: 33.3%;\n  border-right: 1px solid black;\n`;\n\nconst VerticalDivide = styled.div`\n  height: 33.3%;\n  width: 100%;\n`;\n\nconst UserInputArea = styled.div`\n  ${HorizontalAlign}\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  height: 50px;\n\n  /* padding: 10px; */\n`;\n\nconst InputArea = styled.input`\n  ${ AlignCenter }\n  border-width: 0px;\n  font-size: 18px;\n  height: 100%;\n  width: 70%;\n  padding: 0px 10px;\n  margin: 0px;\n\n  ::placeholder {\n    font-size: 18px;\n  }\n`;\n\nconst InputButton = styled.div`\n  ${ AlignCenter }\n  border-left: 1px solid black;\n  /* border-radius: 10px; */\n  font-size: 18px;\n  height: 100%;\n  min-width: 60px;\n  width: 30%;\n\n  &:hover {\n    background-color: black;\n    color: white;\n  };\n`;\n\nconst UserNameArea = styled.div`\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  font-size: 22px;\n  height: 100px;\n  padding: 20px 10px;\n`;\n\n\nfunction GreetingPart() {\n    // const [time, setTime] = useState(new Date());\n    const [currWeather, setCurrWeather] = useState(null);\n    const [userName, setUserName] = useState('');\n    const [user, setUser] = useState('');\n  \n    const getCurrentLocation = () => {\n      // 현재 위치 가져오기\n      navigator.geolocation.getCurrentPosition((position) => {\n        let latitude = position.coords.latitude;\n        let longitude = position.coords.longitude;\n  \n        getWeatherByCurrentLocation(latitude, longitude);\n      });\n    };\n  \n     // 현재 위치 날씨 API 가져오기\n     const getWeatherByCurrentLocation = async (latitude, longitude) => {\n      let WEATHER_API_KEY = '739cddaed6d840ce7ff865f1c8296393';\n      let WEATHER_API_URL = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={part}&appid=${WEATHER_API_KEY}&units=metric&lang=kr`;\n      let response = await fetch(WEATHER_API_URL);\n      let data = await response.json();\n      setCurrWeather(data.current);\n    };\n  \n    useEffect(() => {\n      getCurrentLocation();\n      getWeatherByCurrentLocation();\n    }, []);\n  \n    // useEffect(() => {\n    //   const id = setInterval(() => {\n    //     setTime(new Date());\n    //   }, 1000);\n  \n    //   return (() => \n    //     clearInterval(id) // 불필요한 작업 방지\n    //   ); \n    // }, []);\n  \n    const getUserName = (e) => {\n      setUserName(e.target.value);\n    };\n  \n    const addUserName = (e) => {\n      e.preventDefault();\n\n      if(userName === '') {\n          alert('입력창이 비었네요!');\n      } else {\n        setUser(userName);\n        setUserName('');\n      }\n    };\n\n    return (\n      <MainContent>\n        <VerticalDivide>\n        {\n          user !== '' ? \n            <UserNameArea>{ user }님 <br />안녕하세요</UserNameArea> : \n            <UserInputArea>\n              <InputArea \n                onChange={ getUserName } \n                placeholder=\"이름을 입력해주세요\" \n                value={ userName } \n              />\n              <InputButton onClick={ addUserName }>저장</InputButton>\n            </UserInputArea>\n        }\n        </VerticalDivide>\n        {/* <VerticalDivide>\n          오늘은 { time.toLocaleDateString() }\n          <br />\n          현재시간은 { time.toLocaleTimeString() } 입니다.\n        </VerticalDivide> */}\n        <VerticalDivide>\n          { \n            currWeather === null || currWeather === undefined ? \n            <div>현재 날씨를 가져오고 있어요!</div> : \n            <div>현재 기온은 { currWeather?.temp }℃로 { currWeather?.weather[0].description } 이에요</div>\n          }\n        </VerticalDivide>\n      </MainContent>\n     \n    );\n\n}\n\nexport default GreetingPart;","/Users/a260/dev/myProject/dashboard/src/components/ThirdPart.js",["47","48"],[],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst AlignCenter = css`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n`;\n\nconst HorizontalAlign = css`\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst MainContent = styled.div`\n    box-sizing: border-box; \n    height: 100%;\n    /* padding: 40px; */\n    width: 33.3%;\n`;\n\nconst ClockBox = styled.div`\n    align-items: center;\n    /* background-color: black; */\n    border-bottom: 1px solid black;\n    box-sizing: border-box;\n    /* color: white; */\n    display: flex;\n    font-size: 18px;\n    height: 50px;\n    justify-content: flex-end;\n    padding: 10px;\n    width: 100%;\n`;\n\nfunction ThirdPart() {\n    const [time, setTime] = useState(new Date());\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            setTime(new Date());\n        }, 1000);\n\n        return (() => \n            clearInterval(id) // 불필요한 작업 방지\n        ); \n    }, []);\n\n    return (\n        <MainContent>\n            <ClockBox>\n                { time.toLocaleDateString() } { time.toLocaleTimeString()}\n            </ClockBox>\n        </MainContent> \n    );\n};\n\nexport default ThirdPart;",{"ruleId":"49","severity":1,"message":"50","line":1,"column":18,"nodeType":"51","messageId":"52","endLine":1,"endColumn":21},{"ruleId":"49","severity":1,"message":"53","line":143,"column":10,"nodeType":"51","messageId":"52","endLine":143,"endColumn":19},{"ruleId":"49","severity":1,"message":"54","line":143,"column":21,"nodeType":"51","messageId":"52","endLine":143,"endColumn":33},{"ruleId":"49","severity":1,"message":"55","line":149,"column":22,"nodeType":"51","messageId":"52","endLine":149,"endColumn":35},{"ruleId":"56","severity":1,"message":"57","line":154,"column":6,"nodeType":"58","endLine":154,"endColumn":8,"suggestions":"59"},{"ruleId":"56","severity":1,"message":"60","line":104,"column":8,"nodeType":"58","endLine":104,"endColumn":10,"suggestions":"61"},{"ruleId":"49","severity":1,"message":"62","line":4,"column":7,"nodeType":"51","messageId":"52","endLine":4,"endColumn":18},{"ruleId":"49","severity":1,"message":"63","line":10,"column":7,"nodeType":"51","messageId":"52","endLine":10,"endColumn":22},"no-unused-vars","'css' is defined but never used.","Identifier","unusedVar","'isChecked' is assigned a value but never used.","'setIsChecked' is assigned a value but never used.","'setEditStates' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'currKey'. Either include it or remove the dependency array.","ArrayExpression",["64"],"React Hook useEffect has a missing dependency: 'getCurrentLocation'. Either include it or remove the dependency array.",["65"],"'AlignCenter' is assigned a value but never used.","'HorizontalAlign' is assigned a value but never used.",{"desc":"66","fix":"67"},{"desc":"68","fix":"69"},"Update the dependencies array to be: [currKey]",{"range":"70","text":"71"},"Update the dependencies array to be: [getCurrentLocation]",{"range":"72","text":"73"},[3083,3085],"[currKey]",[2392,2394],"[getCurrentLocation]"]