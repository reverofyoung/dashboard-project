[{"/Users/a260/dev/myProject/dashboard/src/index.js":"1","/Users/a260/dev/myProject/dashboard/src/App.js":"2","/Users/a260/dev/myProject/dashboard/src/reportWebVitals.js":"3","/Users/a260/dev/myProject/dashboard/src/home/Dashboard.js":"4","/Users/a260/dev/myProject/dashboard/src/components/ToDoPart.js":"5","/Users/a260/dev/myProject/dashboard/src/components/GreetingPart.js":"6","/Users/a260/dev/myProject/dashboard/src/components/ThirdPart.js":"7","/Users/a260/dev/myProject/dashboard/src/components/Location.js":"8"},{"size":535,"mtime":1688460300259,"results":"9","hashOfConfig":"10"},{"size":189,"mtime":1688460300253,"results":"11","hashOfConfig":"10"},{"size":362,"mtime":1688460300259,"results":"12","hashOfConfig":"10"},{"size":433,"mtime":1688542723329,"results":"13","hashOfConfig":"10"},{"size":6671,"mtime":1689231463744,"results":"14","hashOfConfig":"10"},{"size":8825,"mtime":1689232679778,"results":"15","hashOfConfig":"10"},{"size":1254,"mtime":1688536710759,"results":"16","hashOfConfig":"10"},{"size":2018,"mtime":1689217158251,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},"10tsc17",{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"21"},{"filePath":"28","messages":"29","suppressedMessages":"30","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"31","usedDeprecatedRules":"21"},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"35","messages":"36","suppressedMessages":"37","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"38"},{"filePath":"39","messages":"40","suppressedMessages":"41","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"42","usedDeprecatedRules":"21"},{"filePath":"43","messages":"44","suppressedMessages":"45","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/a260/dev/myProject/dashboard/src/index.js",[],[],[],"/Users/a260/dev/myProject/dashboard/src/App.js",[],[],"/Users/a260/dev/myProject/dashboard/src/reportWebVitals.js",[],[],"/Users/a260/dev/myProject/dashboard/src/home/Dashboard.js",["46"],[],"import styled, { css } from \"styled-components\";\nimport GreetingPart from \"../components/GreetingPart\";\nimport ToDoPart from \"../components/ToDoPart\";\nimport ThirdPart from \"../components/ThirdPart\";\n\nconst Wrap = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n`;\n\nfunction Dashboard() {\n  return (\n    <Wrap>\n      <GreetingPart />\n      <ToDoPart />\n      <ThirdPart />\n    </Wrap>\n  );\n}\n\nexport default Dashboard;\n","/Users/a260/dev/myProject/dashboard/src/components/ToDoPart.js",["47","48","49","50"],[],"/Users/a260/dev/myProject/dashboard/src/components/GreetingPart.js",["51","52","53","54"],[],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nconst { kakao } = window;\n\nconst AlignCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst HorizontalAlign = css`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst MainContent = styled.div`\n  border-right: 1px solid black;\n  box-sizing: border-box; \n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  /* padding: 30px; */\n  position: relative;\n  width: 33.3%;\n`;\n\nconst VerticalDivide = styled.div`\n  /* height: 33.3%; */\n  width: 100%;\n`;\n\nconst UserInputArea = styled.div`\n  ${HorizontalAlign}\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  height: 50px;\n\n  /* padding: 10px; */\n`;\n\nconst InputArea = styled.input`\n  ${ AlignCenter }\n  border-width: 0px;\n  font-size: 18px;\n  height: 100%;\n  width: 70%;\n  padding: 0px 10px;\n  margin: 0px;\n\n  ::placeholder {\n    font-size: 18px;\n  }\n`;\n\nconst InputButton = styled.div`\n  ${ AlignCenter }\n  border-left: 1px solid black;\n  /* border-radius: 10px; */\n  font-size: 18px;\n  height: 100%;\n  min-width: 60px;\n  width: 30%;\n\n  &:hover {\n    background-color: black;\n    color: white;\n  };\n`;\n\nconst UserNameArea = styled.div`\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  font-size: 22px;\n  height: 100px;\n  padding: 20px 10px;\n`;\n\n\nconst WeatherArea = styled.div`\n  border-bottom: 1px solid black;\n  box-sizing: border-box;\n  height: 100px;\n  line-height: 1.5;\n  /* padding: 0px 10px; */\n  padding: 10px;\n`;\n\nconst CafeListArea = styled.div`\n  box-sizing: border-box;\n  height: 100px;\n  padding: 10px;\n  width: 100%;\n`;\n\nconst CafeListCon = styled.div`\n  box-sizing: border-box;\n  overflow-y: scroll;\n  /* padding:10px; */\n`;\n\nconst MapArea = styled.div`\n  /* height: 50%; */\n  bottom: 0px;\n  box-sizing: border-box;\n  padding: 10px;\n  position: absolute;\n  height: 200px;\n  width: 100%;\n`;\n\nfunction GreetingPart() {\n  const [currWeather, setCurrWeather] = useState(null);\n  const [currTemp, setCurrTemp] = useState('');\n  const [userName, setUserName] = useState('');\n  const [user, setUser] = useState('');\n  const [cafeList, setCafeList] = useState();\n\n  // 현재 위치 가져오기\n  const getCurrentLocation = () => {\n    navigator.geolocation.getCurrentPosition((position) => {\n      let latitude = position.coords.latitude;\n      let longitude = position.coords.longitude;\n      getWeatherByCurrentLocation(latitude, longitude);\n      getLocationMap(latitude, longitude);\n    });\n  };\n\n  // 현재 위치 날씨 API 가져오기\n  const getWeatherByCurrentLocation = async (latitude, longitude) => {\n    if(latitude !== undefined && longitude !== undefined) {\n      let WEATHER_API_KEY = '739cddaed6d840ce7ff865f1c8296393';\n      let WEATHER_API_URL = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={part}&appid=${WEATHER_API_KEY}&units=metric&lang=kr`;\n      let response = await fetch(WEATHER_API_URL);\n      let data = await response.json();\n      setCurrWeather(data.current);\n    } \n  };\n\n  useEffect(() => {\n    getCurrentLocation();\n    getWeatherByCurrentLocation();\n  }, []);\n\n  useEffect(() => {\n    getTemperature();\n  }, [currWeather]);\n\n  // 유저 네임 인풋 데이터 담기\n  const getUserName = (e) => {\n    setUserName(e.target.value);\n  };\n\n  // 유저 네임 저장\n  const addUserName = (e) => {\n    e.preventDefault();\n\n    if(userName === '') {\n        alert('입력창이 비었네요!');\n    } else {\n      setUser(userName);\n      setUserName('');\n    }\n  };\n\n  // 현재 기온 반올림\n  const getTemperature = () => {\n    const temp = currWeather?.temp;\n    setCurrTemp(temp?.toFixed(1));\n  };\n\n  // 지도 생성\n  const getLocationMap = (latitude, longitude) => {\n    var infowindow = new kakao.maps.InfoWindow({ zIndex:1 }); // 장소명을 표출할 인포윈도우를 생성합니다\n    var container = document.getElementById('map'); // 지도를 표시할 div \n    var options = { center: new kakao.maps.LatLng(latitude, longitude), level: 3 };\n    // 지도 생성 및 객체 리턴\n    var map = new kakao.maps.Map(container, options);\n\n    // 현재 위치 마커 이미지 설정\n    var imageSrc = 'https://t1.daumcdn.net/localimg/localimages/07/mapapidoc/marker_red.png'; // 마커이미지 주소\n    var imageSize = new kakao.maps.Size(44, 49); // 마커이미지  크기\n    var imageOption = { offset: new kakao.maps.Point(27, 69) }; // 마커이미지 옵션. 마커의 좌표와 일치시킬 이미지 안에서의 좌표를 설정\n        \n    // 현재 위치 마커 생성\n    var currMarkerImage = new kakao.maps.MarkerImage(imageSrc, imageSize, imageOption);\n    var currMarkerPosition  = new kakao.maps.LatLng(latitude, longitude); \n    var currMarker = new kakao.maps.Marker({ map: map, position: currMarkerPosition, image: currMarkerImage }); \n\n    // 장소 검색 객체  생성\n    var searchPlace = new kakao.maps.services.Places(map); \n    searchPlace.categorySearch('CE7', placesSearchCB, { useMapBounds:true }); \n\n    function placesSearchCB(data, status, pagination) {\n      if (status === kakao.maps.services.Status.OK) {\n        data.map((thisResult) => {\n          displayMarker(thisResult);\n          setCafeList(data);\n        })       \n      }\n    };\n\n    const displayMarker = (cafe) => {\n      // 카페 마커 생성\n      var cafeMarkerPosition = new kakao.maps.LatLng(cafe.y, cafe.x);\n      var marker = new kakao.maps.Marker({ map: map, position: cafeMarkerPosition });\n  \n      // 카페 마커에 클릭 이벤트 등록\n      kakao.maps.event.addListener(marker, 'click', function() {\n        infowindow.setContent('<div style=\"padding:5px;font-size:12px;\">' + cafe.place_name + '</div>');\n        infowindow.open(map, marker);\n      });\n    }\n  \n  };\n\n\n  return (\n    <MainContent>\n      {/* ---------- 유저 네임 영역 ---------- */}\n      <VerticalDivide>\n      {\n        user !== '' ? \n          <UserNameArea>{ user }님 <br />안녕하세요</UserNameArea> : \n          <UserInputArea>\n            <InputArea \n              onChange={ getUserName } \n              placeholder=\"이름을 입력해주세요\" \n              value={ userName } \n            />\n            <InputButton onClick={ addUserName }>저장</InputButton>\n          </UserInputArea>\n      }\n      </VerticalDivide>\n\n      {/* ---------- 날씨 영역 ---------- */}\n      <VerticalDivide>\n        <WeatherArea>\n          {\n            currWeather === null || currWeather === undefined ? \n            <div>날씨를 가져오고 있어요</div> : \n            <div>\n              현재 기온은 { currTemp }℃에요. <br />\n              {\n                currWeather?.weather[0].main === 'Rain' ? '비가 내리니 우산 잊지마세요!' :\n                currWeather?.weather[0].main === 'Snow' ? '눈이 오네요. 미끄러지지 않게 조심하세요' :\n                currWeather?.weather[0].main === 'Clear' ? '맑은 하늘을 볼 수 있겠어요 :-)' :\n                currWeather?.weather[0].main === 'Drizzle' ? '이슬비가 오고 있어요.' :\n                currWeather?.weather[0].main === 'Thunderstorm' ? '뇌우가 오고 있어요.' :\n                currWeather?.weather[0].main === 'Mist' || currWeather?.weather[0].main === 'Haze' || currWeather?.weather[0].main === 'Fog' || currWeather?.weather[0].main === 'Smoke' ? '안개 때문에 흐릴 수도 있겠어요.' : \n                currWeather?.weather[0].main === 'Clouds' ? '구름이 껴서 흐린 날이에요.' : \n                currWeather?.weather[0].main === 'Sand' || currWeather?.weather[0].main === 'Dust' ? '미세먼지가 있네요. 마스크를 착용하는게 좋겠어요.' : \n                currWeather?.weather[0].main === 'Squall' ? '돌풍이 불어요. 외출을 자제해주세요.' : \n                currWeather?.weather[0].main === 'Tornado' ? '회오리 바람이 불어요. 외출을 자제해주세요.' : \n                currWeather?.weather[0].main === 'Ash' ? '화산재가 분출되었어요. 외출을 자제해주세요' : `${currWeather?.weather[0].description}`\n              }\n            </div>\n          }\n        </WeatherArea>\n      </VerticalDivide>\n\n      {/* ---------- 지도?? 카페 목록?? 영역 ---------- */}\n      <VerticalDivide>\n        <CafeListArea>\n          {\n            cafeList === undefined ?\n            <div>근처 카페를 찾고 있어요</div> :\n            <CafeListCon>\n              { cafeList?.map((data) => (<div key={ data.place_name }>{data.place_name}</div>)) }\n            </CafeListCon>\n          }\n        </CafeListArea>\n      </VerticalDivide>\n      <VerticalDivide>\n        <MapArea id=\"map\"></MapArea>\n      </VerticalDivide>\n    </MainContent>\n  );\n}\n\nexport default GreetingPart;","/Users/a260/dev/myProject/dashboard/src/components/ThirdPart.js",["55","56"],[],"import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\n\nconst AlignCenter = css`\n    align-items: center;\n    display: flex;\n    justify-content: center;\n`;\n\nconst HorizontalAlign = css`\n    align-items: center;\n    display: flex;\n    justify-content: space-between;\n`;\n\nconst MainContent = styled.div`\n    box-sizing: border-box; \n    height: 100%;\n    /* padding: 40px; */\n    width: 33.3%;\n`;\n\nconst ClockBox = styled.div`\n    align-items: center;\n    /* background-color: black; */\n    border-bottom: 1px solid black;\n    box-sizing: border-box;\n    /* color: white; */\n    display: flex;\n    font-size: 18px;\n    height: 50px;\n    justify-content: flex-end;\n    padding: 10px;\n    width: 100%;\n`;\n\nfunction ThirdPart() {\n    const [time, setTime] = useState(new Date());\n\n    useEffect(() => {\n        const id = setInterval(() => {\n            setTime(new Date());\n        }, 1000);\n\n        return (() => \n            clearInterval(id) // 불필요한 작업 방지\n        ); \n    }, []);\n\n    return (\n        <MainContent>\n            <ClockBox>\n                { time.toLocaleDateString() } { time.toLocaleTimeString()}\n            </ClockBox>\n        </MainContent> \n    );\n};\n\nexport default ThirdPart;","/Users/a260/dev/myProject/dashboard/src/components/Location.js",[],[],{"ruleId":"57","severity":1,"message":"58","line":1,"column":18,"nodeType":"59","messageId":"60","endLine":1,"endColumn":21},{"ruleId":"57","severity":1,"message":"61","line":134,"column":10,"nodeType":"59","messageId":"60","endLine":134,"endColumn":18},{"ruleId":"57","severity":1,"message":"62","line":134,"column":20,"nodeType":"59","messageId":"60","endLine":134,"endColumn":31},{"ruleId":"57","severity":1,"message":"63","line":146,"column":21,"nodeType":"59","messageId":"60","endLine":146,"endColumn":33},{"ruleId":"64","severity":1,"message":"65","line":204,"column":36,"nodeType":"66","messageId":"67","endLine":204,"endColumn":62},{"ruleId":"68","severity":1,"message":"69","line":143,"column":6,"nodeType":"70","endLine":143,"endColumn":8,"suggestions":"71"},{"ruleId":"68","severity":1,"message":"72","line":147,"column":6,"nodeType":"70","endLine":147,"endColumn":19,"suggestions":"73"},{"ruleId":"57","severity":1,"message":"74","line":188,"column":9,"nodeType":"59","messageId":"60","endLine":188,"endColumn":19},{"ruleId":"75","severity":1,"message":"76","line":196,"column":31,"nodeType":"77","messageId":"78","endLine":196,"endColumn":33},{"ruleId":"57","severity":1,"message":"79","line":4,"column":7,"nodeType":"59","messageId":"60","endLine":4,"endColumn":18},{"ruleId":"57","severity":1,"message":"80","line":10,"column":7,"nodeType":"59","messageId":"60","endLine":10,"endColumn":22},"no-unused-vars","'css' is defined but never used.","Identifier","unusedVar","'editData' is assigned a value but never used.","'setEditData' is assigned a value but never used.","'setIsChecked' is assigned a value but never used.","no-self-assign","'preList[findIndex].content' is assigned to itself.","MemberExpression","selfAssignment","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'getCurrentLocation'. Either include it or remove the dependency array.","ArrayExpression",["81"],"React Hook useEffect has a missing dependency: 'getTemperature'. Either include it or remove the dependency array.",["82"],"'currMarker' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'AlignCenter' is assigned a value but never used.","'HorizontalAlign' is assigned a value but never used.",{"desc":"83","fix":"84"},{"desc":"85","fix":"86"},"Update the dependencies array to be: [getCurrentLocation]",{"range":"87","text":"88"},"Update the dependencies array to be: [currWeather, getTemperature]",{"range":"89","text":"90"},[3151,3153],"[getCurrentLocation]",[3204,3217],"[currWeather, getTemperature]"]