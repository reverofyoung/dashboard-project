{"ast":null,"code":"var _jsxFileName = \"/Users/a260/dev/myProject/react-project/src/home/Dashboard.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport GreetingPart from \"../components/GreetingPart\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MainLayout = css`\n  box-sizing: border-box; \n  height: 100%;\n  padding: 40px;\n  width: 33.3%;\n  border-right: 1px solid black;\n`;\nconst AlignCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\nconst Wrap = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n`;\n_c = Wrap;\nconst MainContent = styled.div`\n ${MainLayout}\n`;\nconst ContentBox = styled.div`\n  font-size: 28px;\n  height: 33.3%;\n  width: 100%;\n`;\nconst HorizontalAlign = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`;\nconst InputArea = styled.input`\n  border-width: 0px 0px 1px 0px;\n  font-size: 30px;\n  height: 60px;\n  width: 70%;\n`;\nconst InputButton = styled.div`\n  ${AlignCenter}\n  border: 1px solid black;\n  border-radius: 10px;\n  font-size: 22px;\n  height: 30px;\n  width: 20%;\n  min-width: 60px;\n`;\nconst ListStyle = styled.div`\n\n`;\n_c2 = ListStyle;\nfunction Dashboard() {\n  _s();\n  const [toDo, setToDo] = useState('');\n  const [toDoList, setToDoList] = useState([]);\n  const [currKey, setCurrKey] = useState(0);\n  const getCurrentLocation = () => {\n    // 현재 위치 가져오기\n    navigator.geolocation.getCurrentPosition(position => {\n      let latitude = position.coords.latitude;\n      let longitude = position.coords.longitude;\n      getWeatherByCurrentLocation(latitude, longitude);\n    });\n  };\n\n  // 현재 위치 날씨 API 가져오기\n  const getWeatherByCurrentLocation = async (latitude, longitude) => {\n    let WEATHER_API_KEY = '739cddaed6d840ce7ff865f1c8296393';\n    let WEATHER_API_URL = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={part}&appid=${WEATHER_API_KEY}&units=metric&lang=kr`;\n    let response = await fetch(WEATHER_API_URL);\n    let data = await response.json();\n    setCurrWeather(data.current);\n    // console.log(data);\n  };\n\n  useEffect(() => {\n    getCurrentLocation();\n    getWeatherByCurrentLocation();\n  }, []);\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n    return () => clearInterval(id) // 불필요한 작업 방지\n    ;\n  }, []);\n  const getUserName = e => {\n    setUserName(e.target.value);\n  };\n  const getTodo = e => {\n    setToDo(e.target.value);\n  };\n  const submitUserName = e => {\n    e.preventDefault();\n    if (userName === '') {\n      alert('입력창이 비었네요!');\n    } else {\n      setUser(userName);\n      setUserName('');\n    }\n  };\n  const submitToDo = e => {\n    e.preventDefault();\n    const addToDo = toDoList.concat({\n      content: toDo,\n      key: currKey\n    });\n    setCurrKey(currKey + 1);\n    setToDoList(addToDo);\n    setToDo('');\n  };\n  const toDoListCon = toDoList.map(thisResult => /*#__PURE__*/_jsxDEV(ListStyle, {\n    children: thisResult.content\n  }, thisResult.key, false, {\n    fileName: _jsxFileName,\n    lineNumber: 135,\n    columnNumber: 5\n  }, this));\n  return /*#__PURE__*/_jsxDEV(Wrap, {\n    children: /*#__PURE__*/_jsxDEV(GreetingPart, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 140,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 139,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"tf72uazWhdfYxn4aJqZuorILUzI=\");\n_c3 = Dashboard;\nexport default Dashboard;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"Wrap\");\n$RefreshReg$(_c2, \"ListStyle\");\n$RefreshReg$(_c3, \"Dashboard\");","map":{"version":3,"names":["useEffect","useState","styled","css","GreetingPart","jsxDEV","_jsxDEV","MainLayout","AlignCenter","Wrap","div","_c","MainContent","ContentBox","HorizontalAlign","InputArea","input","InputButton","ListStyle","_c2","Dashboard","_s","toDo","setToDo","toDoList","setToDoList","currKey","setCurrKey","getCurrentLocation","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","getWeatherByCurrentLocation","WEATHER_API_KEY","WEATHER_API_URL","response","fetch","data","json","setCurrWeather","current","id","setInterval","setTime","Date","clearInterval","getUserName","e","setUserName","target","value","getTodo","submitUserName","preventDefault","userName","alert","setUser","submitToDo","addToDo","concat","content","key","toDoListCon","map","thisResult","children","fileName","_jsxFileName","lineNumber","columnNumber","_c3","$RefreshReg$"],"sources":["/Users/a260/dev/myProject/react-project/src/home/Dashboard.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport styled, { css } from \"styled-components\";\nimport GreetingPart from \"../components/GreetingPart\";\n\nconst MainLayout = css`\n  box-sizing: border-box; \n  height: 100%;\n  padding: 40px;\n  width: 33.3%;\n  border-right: 1px solid black;\n`;\n\nconst AlignCenter = css`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Wrap = styled.div`\n  display: flex;\n  height: 100vh;\n  width: 100vw;\n`;\n\nconst MainContent = styled.div`\n ${ MainLayout }\n`;\n\nconst ContentBox = styled.div`\n  font-size: 28px;\n  height: 33.3%;\n  width: 100%;\n`;\n\nconst HorizontalAlign = styled.div`\n  align-items: center;\n  display: flex;\n  justify-content: space-between;\n`;\n\nconst InputArea = styled.input`\n  border-width: 0px 0px 1px 0px;\n  font-size: 30px;\n  height: 60px;\n  width: 70%;\n`;\n\nconst InputButton = styled.div`\n  ${ AlignCenter }\n  border: 1px solid black;\n  border-radius: 10px;\n  font-size: 22px;\n  height: 30px;\n  width: 20%;\n  min-width: 60px;\n`;\n\nconst ListStyle = styled.div`\n\n`;\n\nfunction Dashboard() {\n  const [toDo, setToDo] = useState('');\n  const [toDoList, setToDoList] = useState([]);\n  const [currKey, setCurrKey] = useState(0);\n\n  const getCurrentLocation = () => {\n    // 현재 위치 가져오기\n    navigator.geolocation.getCurrentPosition((position) => {\n      let latitude = position.coords.latitude;\n      let longitude = position.coords.longitude;\n\n      getWeatherByCurrentLocation(latitude, longitude);\n    });\n  };\n\n   // 현재 위치 날씨 API 가져오기\n   const getWeatherByCurrentLocation = async (latitude, longitude) => {\n    let WEATHER_API_KEY = '739cddaed6d840ce7ff865f1c8296393';\n    let WEATHER_API_URL = `https://api.openweathermap.org/data/2.5/onecall?lat=${latitude}&lon=${longitude}&exclude={part}&appid=${WEATHER_API_KEY}&units=metric&lang=kr`;\n    let response = await fetch(WEATHER_API_URL);\n    let data = await response.json();\n    setCurrWeather(data.current);\n    // console.log(data);\n  };\n\n  useEffect(() => {\n    getCurrentLocation();\n    getWeatherByCurrentLocation();\n      \n  }, []);\n\n  useEffect(() => {\n    const id = setInterval(() => {\n      setTime(new Date());\n    }, 1000);\n\n    return (() => \n      clearInterval(id) // 불필요한 작업 방지\n    ); \n  }, []);\n\n  const getUserName = (e) => {\n    setUserName(e.target.value);\n  };\n\n  const getTodo = (e) => {\n    setToDo(e.target.value);\n  };\n\n  const submitUserName = (e) => {\n    e.preventDefault();\n    if(userName === '') {\n        alert('입력창이 비었네요!');\n    } else {\n      setUser(userName);\n      setUserName('');\n    }\n  };\n\n  const submitToDo = (e) => {\n    e.preventDefault();\n\n    const addToDo = toDoList.concat({\n      content: toDo,\n      key: currKey,\n    });\n\n    setCurrKey(currKey + 1);\n    setToDoList(addToDo);\n    setToDo('');\n  };\n\n  const toDoListCon = toDoList.map((thisResult) => (\n    <ListStyle key={ thisResult.key }>{ thisResult.content }</ListStyle>\n  ));\n\n  return (\n    <Wrap>\n      <GreetingPart />\n{/*   \n      <MainContent>\n        <HorizontalAlign>\n          <InputArea \n            onChange={ getTodo } \n            placeholder=\"할 일\" \n            value={ toDo } \n          />\n          <InputButton onClick={ submitToDo }>저장</InputButton>\n        </HorizontalAlign>\n        <div>{ toDoListCon }</div>\n      </MainContent>  */}\n    </Wrap>\n   \n  );\n}\n\nexport default Dashboard;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}